---
description: 
globs: 
alwaysApply: true
---
# Gmail MCP Server Guide

This project is a Gmail server built using the Model Context Protocol (MCP) and the fastmcp framework. It exposes Gmail functionalities as tools that can be consumed by MCP clients like Cursor or Claude.

## Project Structure

- The main source code is located in the `src/` directory.
- [src/server.py](mdc:src/server.py): The main server application using fastmcp, where the tools are defined and exposed.
- [src/gmail_api.py](mdc:src/gmail_api.py): A facade class `GmailClient` that handles authentication and delegates Gmail API calls to specific modules.
- [src/auth.py](mdc:src/auth.py): Handles the Google OAuth2 authentication flow, managing `credentials.json` and `token.json`.
- [src/messages.py](mdc:src/messages.py): Contains functions for managing Gmail messages (listing, getting, sending, replying, deleting, modifying labels).
- [src/labels.py](mdc:src/labels.py): Contains functions for managing Gmail labels (listing, getting, creating, deleting).
- [src/drafts.py](mdc:src/drafts.py): Contains functions for managing Gmail drafts (listing, getting, creating, updating, deleting, sending).
- `credentials.json`: Stores Google API credentials (sensitive, not in repo).
- `token.json`: Stores user access and refresh tokens after authentication (sensitive, not in repo).
- `.env`: Environment variable file for configuration like server port and credentials file paths.
- [requirements.txt](mdc:requirements.txt): Lists Python dependencies.
- [run.sh](mdc:run.sh): A simple script to run the server.

## Technical Stack

- **Framework:** fastmcp
- **API Interaction:** Google API Client Library for Python
- **Service:** Gmail API
- **Authentication:** OAuth2 flow
- **Language:** Python

## Available Tool Categories

The server exposes tools for interacting with different aspects of Gmail:

- **Messages:** Tools for listing, getting, searching, sending, replying to, and deleting emails, as well as modifying labels on emails.
- **Labels:** Tools for listing, getting details about, creating, and deleting custom labels.
- **Drafts:** Tools for listing, getting, creating, updating, deleting, and sending email drafts. These are defined in [src/server.py](mdc:src/server.py) and implemented using the functions in [src/drafts.py](mdc:src/drafts.py).

This guide provides an overview. Refer to the individual Python files for specific tool implementations and details.